
/**
 * A Combobox is a composite widget that lets a user select one or more optons, from a
 * predefined or autocompleted searchable list. The result of that selection
 * is then shown as the value of an input, inside the Combobox widget.
 *
 * The multi-select Combobox can have more than one selected option.
 * When more than one option has been selected, the value of the input should
 * be updated with the total number of selected items, such as "3 options selected".
 * When a Combobox with multiple selected options is closed,
 * a listbox of pills is also used to represent those selected options.
 * The listbox of pills is positioned below the read-only input, each pill represents a selected option.
 * This allows a user to easily see and remove selected items from the Combobox.
 *
 * The Combobox comes with 2 distinct variations of functionality. A "Read-Only and an "Autocomplete" Combobox.
 * A read-only Combobox allows a user to select an option from a pre-defined list of options. It does not allow
 * free form user input, nor does it allow the user to modify the selected value.
 * An autocomplete Combobox also allows a user to select an option from a list
 * but, that list can be affected by what the user types into the input of the Combobox. This can be
 * useful when the list of options a user can choose from is very large, as user input can start
 * to only display options that match the text the user has entered, effectively performing a search.
 * If no option matches, the user can complete the value of the combobox by finishing their own text entry.
 *
 * The listbox of options can be displayed as just a simple single list, or that list can be grouped with
 * headings, to better organise the options.
 *
 * The target HTML element, `slds-combobox` and dropdown need to be wrapped in the class
 * `.slds-dropdown-trigger dropdown-trigger--click`.
 *
 * #### Accessibility
 *
 * We follow the ARIA Combobox widget pattern to implement this component. Comboboxes allows the user to have
 * dual keyboard focus enabling them to select an option from the list with arrow keys, whilst leaving browser focus inside
 * the `input`.
 *
 * Implementing a multi-select pattern with a Combobox is not standard, nor is it technically supported by the specification.
 * Therefore great care should be paid to the extra steps we take to try and communicate multi-selection.
 *
 * We have decided to implement the Combobox based on the [ARIA 1.1 specification](http://w3c.github.io/aria/aria/aria.html#combobox).
 * The Combobox from ARIA 1.1 is a composite widget, in that it is a widget that is composed of other widgets or concepts.
 * In this implementation the `combobox` now owns (by means of parent / child relationships) a `textbox` and a `listbox` of `option`'s.
 *
 * **Expected markup:**
 *
 * ##### Combobox
 *
 * - A Combobox must come with an associated `label` element, with an appropriate `for` attribute
 * - `slds-combobox` acts as the root node to the composite Combobox widget. It takes the `role="combobox"` attribute as a result
 *   - `aria-haspopup="listbox"` attribute is then applied to indicate the Combobox will display a popup, of type `listbox`
 *   - `aria-expanded="true|false"` attribute is applied to describe whether the popup of `listbox` is currently visible or not
 *
 * ##### Textbox
 *
 * - The Textbox is an `input` with a role of `textbox`. The role is implicit on inputs, but in this case it doesn't hurt to be explicit
 * - The Textbox has `autocomplete="off"` to remove the browsers suggestions from the `input`
 * - The Textbox has `aria-controls=""` which points to the ID of the `listbox`. It informs Assistive Technology what DOM node the input controls, in display or content
 * - The Textbox has the `type` attribute set to be `text` as it's not a search field
 * - The Textbox has `aria-activedescendant` attribute applied only when an option is in "dual focus" via keyboard navigation, otherwise it should be removed
 * - The Textbox gets a `value` set to reflect that that option has been selected by the user
 *
 * ##### Textbox - Read-only
 *
 * - The Textbox has `readonly` attribute applied
 *
 * ##### Textbox - Autocomplete
 *
 * - The Textbox has `aria-autocomplete="list"` attribute applied
 *
 * ##### Listbox
 *
 * - The `listbox` has `role="listbox"` applied
 * - The `listbox` can have child `option`'s. We place `role="option"` on a `span` element, inside a list item. As such the list item `li` needs to be removed from the Accessibility Tree with `role="presentation"`
 * - A `listbox` has the ability to group options together under a visual heading or label. This means the `role="listbox"` attribute is placed on a common parent element, which can wrap multiple lists (or groups) of options
 *   - When a `listbox` has no option groups
 *     - The `ul` element has `role="presentation"` to remove it from the Accessibility Tree
 *   - When a `listbox` has option groups, each group gets a visual label. Exactly like `optgroup` in a `select` element
 *     - The `ul` element in this case has `role="group"` with an `aria-label` that describes the group
 *     - Display the group label visually, but due to the way a listbox works it can only be marked as `role="presentation"`, as a `listbox` can only have `option` children. This allows us to communicate the group label visually and programmatically to a screen reader
 * - Every `option` has `aria-selected="false"` by default
 * - Disabled `option`s should have `aria-disabled="true"` applied
 *
 * ##### Listbox - Multi-select
 *
 * - To represent multi-selection on a `listbox` to a screen reader, we must describe previously selected options with hidden assistive text, to represent the check mark
 *
 * **Expected keyboard interactions:**
 *
 * - Focus is placed into the `input` by the user
 * - The `listbox` is show on `input` focus, and `aria-expanded` is set to `true` on the `combobox` element to reflect that
 * - Up and Down arrow keys cycle through the available `option`s by setting and updating `aria-activedescendant="id_of_option"` on the `input`, each time you press the arrow key
 *   - `aria-selected` on the current `option` is changed to `true`
 *   - Disabled options should be skipped
 * - Esc key closes the `listbox` and sets `aria-expanded` to `false` on the `combobox`
 * - Enter key confirms selection, sets `value` if not already set, and closes the `listbox` and sets `aria-expanded` to `false` on the `combobox`
 *
 * ##### Read-only
 *
 * - Up and Down arrows also **must** update the `input` value as you navigate through the list, to reflect the currently selected option
 * - Any character key updates `aria-activedescendant` to the next `option` that starts with that character, if applicable
 *
 * ##### Autocomplete (when not allowing free form text as a valid value)
 *
 * - Up and Down arrows also **should** update the `input` value as you navigate through the list, to reflect the currently selected option
 * - Enter key, with an option selected should also set `readonly` on the `input`
 * - Esc key with an option selected should remove `readonly` and clear the `value` of the `input`
 *
 * @summary A widget that provides a user with an input field that is either an autocomplete or readonly, accompanied with a listbox of pre-defined options.
 *
 * @base
 * @name combobox
 * @selector .slds-combobox_container, .slds-combobox-group
 * @support dev-ready
 * @category experience
 * @type user-input
 * @layout adaptive
 * @role combobox
 * @scroller
 */
/**
 * @summary Container that manages layout when a listbox of pill options sit next to a combobox search input
 *
 * @name base
 * @selector .slds-combobox_container
 * @restrict div
 * @support dev-ready
 * @variant
 */
.slds-combobox_container {
	display: flex;
	flex-direction: column;
	position: relative;
	/**
   * Opens listbox dropdown
   *
   * @selector .slds-is-open
   * @restrict .slds-combobox
   * @modifier
   */
	/**
   * @summary Apply when a combobox has a selection
   * @selector .slds-has-selection
   * @restrict .slds-combobox_container
   */
	/**
   * @summary Icon only variant of a combobox
   * @selector .slds-has-icon-only
   * @restrict .slds-combobox_container
   */
}
.slds-combobox_container.slds-is-open .slds-dropdown {
	display: block;
}
.slds-combobox_container.slds-has-selection .slds-combobox__input-value,
.slds-combobox_container.slds-has-selection .slds-combobox__input-value:focus {
	box-shadow: 0 0 0 2px #fff inset, 0 0 0 3px #dddbda inset;
}
.slds-combobox_container.slds-has-icon-only .slds-combobox__input,
.slds-combobox_container.slds-has-icon-only .slds-combobox__input:focus,
.slds-combobox_container.slds-has-icon-only .slds-combobox__input.slds-has-focus {
	width: 0;
	pointer-events: auto;
}
.slds-combobox_container.slds-has-icon-only .slds-input__icon {
	z-index: 2;
	pointer-events: none;
}

/**
 * Container around form element with combobox input
 *
 * @selector .slds-combobox
 * @restrict .slds-combobox_container > div
 */
.slds-combobox {
	position: static;
	display: flex;
	flex-direction: column;
	flex: 1 1 auto;
}

/**
 * Form element with combobox input
 *
 * @selector .slds-combobox__form-element
 * @restrict .slds-combobox > div
 */
.slds-combobox__form-element {
	flex: 1 1 auto;
}

[role='combobox'] input[readonly] {
	padding-left: 0.75rem;
	border-color: #dddbda;
	background-color: white;
	font-size: inherit;
	font-weight: 400;
}
[role='combobox'] input[readonly]:focus,
[role='combobox'] input[readonly].slds-has-focus {
	border-color: #1589ee;
	box-shadow: 0 0 3px #0070d2;
}
[role='combobox'] input[readonly][disabled] {
	background-color: #e2e2e2;
	border-color: #c9c7c5;
}

/**
 * Listbox container
 * @name listbox
 * @selector .slds-listbox
 * @restrict ul
 * @support dev-ready
 * @variant
 */
.slds-listbox {
	font-size: 0.8125rem;
}

/**
 * Inline listbox
 *
 * @selector .slds-listbox_inline
 * @restrict .slds-listbox
 * @modifier
 */
.slds-listbox_inline,
.slds-listbox--inline {
	display: inline-flex;
	flex-wrap: wrap;
	flex-shrink: 0;
	align-items: center;
	margin-left: 0.125rem;
	margin-right: 0.125rem;
}
.slds-listbox_inline li,
.slds-listbox--inline li {
	display: flex;
}
.slds-listbox_inline li + li,
.slds-listbox--inline li + li {
	padding-left: 0.125rem;
}

/**
 * Horizontal listbox
 *
 * @selector .slds-listbox_horizontal
 * @restrict .slds-listbox
 * @modifier
 */
.slds-listbox_horizontal,
.slds-listbox--horizontal {
	display: inline-flex;
	flex-wrap: wrap;
	align-items: center;
}
.slds-listbox_horizontal li,
.slds-listbox--horizontal li {
	display: flex;
}
.slds-listbox_horizontal li + li,
.slds-listbox--horizontal li + li {
	padding-left: 0.125rem;
}

/**
 * Choosable option within listbox
 *
 * @selector .slds-listbox__option
 * @restrict .slds-listbox__item > div
 */
.slds-listbox__option:hover {
	cursor: pointer;
}

.slds-listbox__option:focus {
	outline: 0;
}

.slds-listbox__option .slds-truncate {
	display: inline-block;
	vertical-align: middle;
}

.slds-listbox__option[aria-disabled='true'] {
	color: #dddbda;
}

/**
 * @summary Header for choosable option within listbox
 * @selector .slds-listbox__option-header
 * @restrict .slds-listbox__option h3
 */
.slds-listbox__option-header {
	font-size: 0.875rem;
	font-weight: 700;
}

/**
 * @summary Container for listbox option icon
 * @selector .slds-listbox__option-icon
 * @restrict .slds-listbox__option span
 */
.slds-listbox__option-icon {
	width: 1.5rem;
	display: inline-flex;
	align-content: center;
	align-items: center;
	justify-content: center;
	color: #706e6b;
}

.slds-listbox__option[aria-disabled='true'] .slds-listbox__option-icon {
	color: currentColor;
}

/**
 * Creates a vertical listbox
 *
 * @selector .slds-listbox_vertical
 * @restrict .slds-listbox
 * @modifier
 */
.slds-listbox_vertical,
.slds-listbox--vertical {
	/**
   * Focus state of a vertical listbox option
   *
   * @selector .slds-has-focus
   * @restrict .slds-listbox__option
   * @modifier
   */
	/**
   * Modifies the listbox option if it contains an entity object
   *
   * @selector .slds-listbox__option_entity
   * @restrict .slds-listbox__option
   */
	/**
   * Modifies the listbox option if it contains an plain object or string
   *
   * @selector .slds-listbox__option_plain
   * @restrict .slds-listbox__option
   */
	/**
   * If the listbox option has metadata or secondary information that sits below its primary text
   *
   * @selector .slds-listbox__option_has-meta
   * @restrict .slds-listbox__option
   */
}
.slds-listbox_vertical .slds-listbox__option:focus,
.slds-listbox_vertical .slds-listbox__option:hover,
.slds-listbox_vertical .slds-listbox__option.slds-has-focus,
.slds-listbox--vertical .slds-listbox__option:focus,
.slds-listbox--vertical .slds-listbox__option:hover,
.slds-listbox--vertical .slds-listbox__option.slds-has-focus {
	background-color: whitesmoke;
	text-decoration: none;
}
.slds-listbox_vertical .slds-listbox__option[aria-disabled='true'],
.slds-listbox_vertical .slds-listbox__option[role='presentation']:hover,
.slds-listbox--vertical .slds-listbox__option[aria-disabled='true'],
.slds-listbox--vertical .slds-listbox__option[role='presentation']:hover {
	background-color: transparent;
	cursor: default;
}
.slds-listbox_vertical .slds-listbox__option_entity,
.slds-listbox_vertical .slds-listbox__option--entity,
.slds-listbox--vertical .slds-listbox__option_entity,
.slds-listbox--vertical .slds-listbox__option--entity {
	padding: 0.25rem 0.75rem;
}
.slds-listbox_vertical .slds-listbox__option_entity .slds-media__figure,
.slds-listbox_vertical .slds-listbox__option--entity .slds-media__figure,
.slds-listbox--vertical .slds-listbox__option_entity .slds-media__figure,
.slds-listbox--vertical .slds-listbox__option--entity .slds-media__figure {
	margin-right: 0.5rem;
}
.slds-listbox_vertical .slds-listbox__option_plain,
.slds-listbox_vertical .slds-listbox__option--plain,
.slds-listbox--vertical .slds-listbox__option_plain,
.slds-listbox--vertical .slds-listbox__option--plain {
	padding: 0.5rem 0.75rem;
}
.slds-listbox_vertical .slds-listbox__option_term,
.slds-listbox--vertical .slds-listbox__option_term {
	padding: 0.5rem 0.75rem;
}
.slds-listbox_vertical .slds-listbox__option_has-meta .slds-media__figure,
.slds-listbox_vertical .slds-listbox__option--has-meta .slds-media__figure,
.slds-listbox--vertical .slds-listbox__option_has-meta .slds-media__figure,
.slds-listbox--vertical .slds-listbox__option--has-meta .slds-media__figure {
	margin-top: 0.25rem;
}

/**
 * Class to target styling the value of a combobox input
 *
 * @selector .slds-combobox__input-value
 * @restrict .slds-combobox input
 */
[class*='slds-input-has-icon_left'] .slds-combobox__input[value],
[class*='slds-input-has-icon--left'] .slds-combobox__input[value],
[class*='slds-input-has-icon_left'] .slds-combobox__input.slds-combobox__input-value,
[class*='slds-input-has-icon--left'] .slds-combobox__input.slds-combobox__input-value {
	padding-left: 2.25rem;
}

/**
 * If readonly selection is an entity, use this class
 *
 * @selector .slds-combobox__input-entity-icon
 * @restrict .slds-combobox__form-element span
 */
.slds-combobox__input-entity-icon {
	width: 1.25rem;
	height: 1.25rem;
	position: absolute;
	top: 50%;
	left: calc(0.25rem + 1px);
	transform: translateY(-50%);
	z-index: 2;
}
.slds-combobox__input-entity-icon .slds-icon {
	width: 1.25rem;
	height: 1.25rem;
}

/**
 * Icon that is a direct sibling of a combobox container. This is not the same as an input icon.
 *
 * @selector .slds-combobox_container__icon
 * @restrict .slds-combobox_container svg
 */
.slds-combobox_container__icon {
	color: #b0adab;
}

/**
 * The icon within a plain listbox that indicates if an option has been selected or not.
 *
 * @selector .slds-listbox__icon-selected
 * @restrict .slds-listbox__item svg
 */
.slds-listbox__icon-selected {
	opacity: 0;
	fill: #0070d2;
}

/**
 * Modifier that makes selected icon visible
 *
 * @selector .slds-is-selected
 * @restrict .slds-listbox__option
 * @modifier
 */
.slds-listbox__option.slds-is-selected .slds-listbox__icon-selected {
	opacity: 1;
}

.slds-listbox__option.slds-is-selected .slds-listbox__option-icon {
	color: #0070d2;
}

/**
 * The main text of an entity listbox
 *
 * @selector .slds-listbox__option-text_entity
 * @restrict .slds-listbox__option span
 */
.slds-listbox__option-text_entity,
.slds-listbox__option-text--entity {
	max-width: 100%;
	overflow: hidden;
	text-overflow: ellipsis;
	white-space: nowrap;
	display: block;
	margin-bottom: 0.125rem;
}

/**
 * The metadata or secondary text of an entity listbox
 *
 * @selector .slds-listbox__option-meta
 * @restrict .slds-listbox__option span
 */
.slds-listbox__option-meta {
	display: block;
	margin-top: -0.25rem;
	color: #3e3e3c;
}

.slds-listbox__option[aria-disabled='true'] .slds-listbox__option-meta {
	color: currentColor;
}

.slds-listbox_object-switcher,
.slds-listbox--object-switcher {
	flex-shrink: 0;
	padding: 0.125rem;
}

/**
 * @summary Modifier that identifies the combobox as the object switcher, applies specific interactions for its context
 * @selector .slds-combobox_object-switcher
 * @restrict .slds-combobox-group div
 */
.slds-combobox_object-switcher {
	flex-shrink: 0;
}
.slds-combobox_object-switcher .slds-combobox__input {
	width: 7.5rem;
	transition: width 80ms linear;
	font-size: 0.75rem;
	color: #3e3e3c;
}
.slds-combobox_object-switcher .slds-combobox__input:focus,
.slds-combobox_object-switcher .slds-combobox__input.slds-has-focus {
	width: 10rem;
}
.slds-combobox_object-switcher .slds-icon {
	width: 0.75rem;
	height: 0.75rem;
}

/**
 * @summary Input field within a combobox
 *
 * @selector .slds-combobox__input
 * @restrict .slds-combobox input
 */
.slds-combobox__input {
	/**
   * @summary Force focus state of the input
   *
   * @selector .slds-has-focus
   * @restrict .slds-combobox__input
   */
}
.slds-combobox__input:focus,
.slds-combobox__input.slds-has-focus {
	border-color: #1589ee;
	box-shadow: 0 0 3px #0070d2;
}

/**
 * @summary Container for a combobox group
 * @name grouped
 * @selector .slds-combobox-group
 * @restrict div
 * @support dev-ready
 * @variant
 */
.slds-combobox-group {
	display: flex;
	flex-direction: row;
	/**
   * @summary Modifier that notifies the combobox group that a selection has been made
   *
   * @selector .slds-has-selection
   * @restrict .slds-combobox-group, .slds-combobox_container
   */
}
.slds-combobox-group .slds-combobox_container {
	flex: 1 1 auto;
}
.slds-combobox-group .slds-combobox__input,
.slds-combobox-group .slds-combobox_object-switcher__button {
	border-radius: 0;
	margin-left: -1px;
	margin-right: -1px;
	position: relative;
}
.slds-combobox-group .slds-combobox__input:focus,
.slds-combobox-group .slds-combobox__input.slds-has-focus,
.slds-combobox-group .slds-combobox_object-switcher__button:focus,
.slds-combobox-group .slds-combobox_object-switcher__button.slds-has-focus {
	z-index: 1;
}
.slds-combobox-group.slds-has-selection .slds-combobox-addon_start .slds-combobox__input {
	border-bottom-left-radius: 0;
}
.slds-combobox-group.slds-has-selection .slds-combobox-addon_end .slds-combobox__input {
	border-bottom-right-radius: 0;
}
.slds-combobox-group.slds-has-selection ~ .slds-listbox_selection-group {
	display: flex;
	position: relative;
	border: 1px solid #dddbda;
	border-top: 0;
	border-bottom-left-radius: 0.25rem;
	border-bottom-right-radius: 0.25rem;
	left: -1px;
}
.slds-combobox-group .slds-listbox_horizontal li + li {
	padding: 0.125rem;
}

/**
 * @summary The container of pill selections found inside of a combobox group
 * @selector .slds-listbox_selection-group
 * @restrict .slds-combobox-group ~ div, .slds-combobox_container ~ div
 */
.slds-listbox_selection-group {
	position: relative;
	padding: 0;
	padding-right: 3.75rem;
	height: calc(1.875rem + 1px);
	overflow: hidden;
	/**
   * @summary Expanded state of a selection group
   * @selector .slds-is-expanded
   * @restrict .slds-listbox_selection-group
   */
	/**
   * @summary Toggle button to show all of the pill selections
   * @selector .slds-listbox-toggle
   * @restrict .slds-listbox_selection-group > span
   */
}
.slds-listbox_selection-group.slds-is-expanded {
	height: auto;
	padding: 0;
}
.slds-listbox_selection-group .slds-listbox-item {
	padding: 0.125rem;
	line-height: 1;
}
.slds-listbox_selection-group .slds-listbox-toggle {
	position: absolute;
	right: 0.5rem;
	top: 0.5rem;
}
.slds-listbox_selection-group .slds-listbox-toggle .slds-button {
	line-height: 1;
}

/**
 * @summary The first combobox in the combobox group
 * @selector .slds-combobox-addon_start
 * @restrict .slds-combobox-group div
 */
.slds-combobox-addon_start .slds-combobox__input {
	border-top-right-radius: 0;
	border-bottom-right-radius: 0;
	border-top-left-radius: 4px;
	border-bottom-left-radius: 4px;
}

/**
 * @summary The last combobox in the combobox group
 * @selector .slds-combobox-addon_end
 * @restrict .slds-combobox-group div
 */
.slds-combobox-addon_end .slds-combobox__input {
	border-top-right-radius: 4px;
	border-bottom-right-radius: 4px;
	border-top-left-radius: 0;
	border-bottom-left-radius: 0;
}

/**
 * If combo has a selection model that requires a listbox of pills to be displayed
 * inside of a combobox
 *
 * @selector .slds-has-inline-listbox
 * @restrict .slds-combobox_container
 */
.slds-has-inline-listbox,
.slds-has-object-switcher {
	flex-direction: row;
	background: white;
	border: 1px solid #dddbda;
	border-radius: 0.25rem;
	/**
   * Modifier to the combobox when an SVG icon sits adjacent to the combobox form element
   *
   * @selector .slds-has-icon_left
   * @restrict .slds-combobox
   */
}
.slds-has-inline-listbox .slds-combobox__input,
.slds-has-object-switcher .slds-combobox__input {
	min-height: 1.625rem;
	line-height: 1.625rem;
	border: 0;
	padding-top: 0.125rem;
	padding-bottom: 0.125rem;
}
.slds-has-inline-listbox .slds-combobox__input:focus,
.slds-has-inline-listbox .slds-combobox__input:active,
.slds-has-object-switcher .slds-combobox__input:focus,
.slds-has-object-switcher .slds-combobox__input:active {
	outline: 0;
	box-shadow: none;
}
.slds-has-inline-listbox .slds-listbox_object-switcher ~ .slds-listbox_inline,
.slds-has-inline-listbox .slds-listbox--object-switcher ~ .slds-listbox--inline,
.slds-has-inline-listbox .slds-combobox_container__icon ~ .slds-listbox_inline,
.slds-has-inline-listbox .slds-combobox_container__icon ~ .slds-listbox--inline,
.slds-has-object-switcher .slds-listbox_object-switcher ~ .slds-listbox_inline,
.slds-has-object-switcher .slds-listbox--object-switcher ~ .slds-listbox--inline,
.slds-has-object-switcher .slds-combobox_container__icon ~ .slds-listbox_inline,
.slds-has-object-switcher .slds-combobox_container__icon ~ .slds-listbox--inline {
	margin-left: 0.5rem;
}
.slds-has-inline-listbox.slds-has-icon_left,
.slds-has-object-switcher.slds-has-icon_left {
	padding-left: 2.25rem;
	/**
     * SVG icon that sits adjacent to the combobox form element
     *
     * @selector .slds-combobox_container__icon
     * @restrict .slds-combobox_container svg
     */
}
.slds-has-inline-listbox.slds-has-icon_left .slds-combobox_container__icon,
.slds-has-object-switcher.slds-has-icon_left .slds-combobox_container__icon {
	width: 1rem;
	height: 1rem;
	position: absolute;
	left: 1.125rem;
	top: 50%;
	margin-top: -0.5rem;
}

.slds-has-inline-listbox [role='listbox'] {
	display: inline-flex;
	padding: 0;
}

.slds-has-inline-listbox .slds-combobox__input[value],
.slds-has-inline-listbox .slds-combobox__input-value {
	box-shadow: 0 0 0 2px #fff inset, 0 0 0 3px #dddbda inset;
}

.slds-picklist_draggable,
.slds-picklist--draggable {
	display: flex;
}
.slds-picklist_draggable .slds-button,
.slds-picklist--draggable .slds-button {
	margin: 0.25rem;
}
.slds-picklist_draggable .slds-button:first-of-type,
.slds-picklist--draggable .slds-button:first-of-type {
	margin-top: 1.5rem;
}

.slds-picklist__item {
	position: relative;
	line-height: 1.5;
}
.slds-picklist__item > a,
.slds-picklist__item > span {
	display: block;
	padding: 0.5rem 0.75rem;
}
.slds-picklist__item > a:hover,
.slds-picklist__item > span:hover {
	background-color: whitesmoke;
	cursor: pointer;
}
.slds-picklist__item > a:active,
.slds-picklist__item > span:active {
	background-color: whitesmoke;
}
.slds-picklist__item[aria-selected='true'] {
	background-color: whitesmoke;
}

/**
 * A dueling picklist inherits styles from the listbox component
 * @summary Initializes a dueling picklist
 *
 * @name base
 * @selector .slds-dueling-list
 * @restrict div
 * @support dev-ready
 * @variant
 */
.slds-dueling-list {
	display: flex;
	clear: left;
}

/**
 * @summary Handles the layout of the dueling picklist
 *
 * @selector .slds-dueling-list__column
 * @restrict .slds-dueling-list div
 */
.slds-dueling-list__column {
	display: inline-flex;
	flex-direction: column;
}
.slds-dueling-list__column .slds-button {
	margin: 0.25rem;
}
.slds-dueling-list__column .slds-button:first-of-type {
	margin-top: 1.5rem;
}

/**
 * @summary Changes the layout of the dueling picklist to be responsive
 *
 * @selector .slds-dueling-list__column_responsive
 * @restrict .slds-dueling-list__column
 */
.slds-dueling-list__column_responsive {
	flex: 0 1 15rem;
	flex-wrap: wrap;
	overflow: hidden;
	min-width: 6rem;
}
.slds-dueling-list__column_responsive .slds-dueling-list__options {
	width: auto;
	max-width: 100%;
}

/**
 * @summary Bounding visual container for listbox of options
 *
 * @selector .slds-dueling-list__options
 * @restrict .slds-dueling-list div
 */
.slds-dueling-list__options,
.slds-picklist__options {
	border: 1px solid #dddbda;
	border-radius: 0.25rem;
	padding: 0.25rem 0;
	width: 15rem;
	height: 15rem;
	background-color: white;
	overflow: auto;
	/**
   * @summary Selected/dragging state of a listbox option
   * @selector .slds-is-selected
   * @restrict .slds-dueling-list__options div
   */
	/**
   * @summary grabbed state of a listbox option
   * @selector .slds-is-grabbed
   * @restrict .slds-dueling-list__options div
   */
	/**
   * @summary Disabled state of a picklist option
   * @selector .slds-is-disabled
   * @restrict .slds-dueling-list__options
   */
}
.slds-dueling-list__options [aria-selected='true'],
.slds-picklist__options [aria-selected='true'] {
	background-color: #0070d2;
	color: white;
}
.slds-dueling-list__options [aria-selected='true']:hover,
.slds-dueling-list__options [aria-selected='true']:focus,
.slds-picklist__options [aria-selected='true']:hover,
.slds-picklist__options [aria-selected='true']:focus {
	background: #005fb2;
	color: white;
}
.slds-dueling-list__options .slds-is-grabbed,
.slds-picklist__options .slds-is-grabbed {
	transform: rotate(3deg);
}
.slds-dueling-list__options.slds-is-disabled,
.slds-picklist__options.slds-is-disabled {
	background-color: #e2e2e2;
	border-color: #c9c7c5;
	color: #3e3e3c;
}
.slds-dueling-list__options.slds-is-disabled:hover,
.slds-picklist__options.slds-is-disabled:hover {
	cursor: not-allowed;
}
.slds-dueling-list__options.slds-is-disabled .slds-listbox__option:hover,
.slds-picklist__options.slds-is-disabled .slds-listbox__option:hover {
	cursor: not-allowed;
	background-color: transparent;
}
.slds-dueling-list__options.slds-is-disabled .slds-listbox__option:focus,
.slds-picklist__options.slds-is-disabled .slds-listbox__option:focus {
	background-color: transparent;
}
